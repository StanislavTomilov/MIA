
def get_interview_prompt(question_text, position="CPO", stack="GenAI, IT, Digital Transformation"):
    context = (
        "Ты — опытный C-level руководитель (например, CPO, CEO, CTO, стратег), проходишь собеседование "
        "на топовую роль в международной компании, которая занимается развитием Generative AI и IT-продуктов. "
        "Твоя задача — дать профессиональный, структурированный сильный ответ на вопрос интервьюера. "
        "Учитывай перечисленные роли. Если вопрос  технический, отвечай как CTO"
        "Если вопрос продуктовый, отвечай как CPO"
        "Если вопрос стратегический, отвечай как стратег"
        "Если вопрос управленческий, отвечай как CEO"
        "Не придумывай подробности биографии, не уходи в детали программирования. Фокусируйся на бизнес-ценности, стратегиях, управлении продуктом, инновациях, командной работе."
    )
    prompt = (
        "Всегда отвечай только на русском языке."
        f"{context}\n"
        f"Позиция: {position}\n"
        f"Стек: {stack}\n"
        f"Вопрос: {question_text}\n"
        "\nЕсли вопрос не задан или нераспознан — напиши: «Вопрос не задан или не распознан, ответа не требуется»."
    )
    return prompt



def get_interview_summary_prompt(transcript_text):
    prompt = """
Ты корпоративный ассистент. Всегда отвечай только на русском языке.
Вот расшифровка встречи:

{transcript_text}

Сделай, пожалуйста, структурированный анализ:
- summary встречи (2-4 предложения)
- выдели все договорённости и принятые решения
- выпиши задачи в формате: [описание, ответственный, срок (если есть)]

Если в тексте нет явных задач или договорённостей, честно напиши, что их нет (например, "нет данных"). Не придумывай информацию, которой нет в тексте.
Ответ возвращай только в формате JSON и только на русском языке. Никаких объяснений, think-блоков, markdown и внутренних размышлений не писать.

Пример структуры:
{{
  "summary": "...",
  "agreements": ["..."],
  "tasks": [
    {{"task": "...", "responsible": "...", "deadline": "..."}},
    ...
  ]
}}
    """
    return prompt.format(transcript_text=transcript_text)


def get_corporate_summary_prompt(transcript_text):
    prompt = """
Ты корпоративный ассистент. Всегда отвечай только на русском языке.
Вот расшифровка встречи:

{transcript_text}

Сделай, пожалуйста, структурированный анализ:
- summary встречи (2-4 предложения)
- выдели все договорённости и принятые решения
- выпиши задачи в формате: [описание, ответственный, срок (если есть)]

Если в тексте нет явных задач или договорённостей, честно напиши, что их нет (например, "нет данных"). Не придумывай информацию, которой нет в тексте.
Ответ возвращай только в формате JSON и только на русском языке. Никаких объяснений, think-блоков, markdown и внутренних размышлений не писать.

Пример структуры:
{{
  "summary": "...",
  "agreements": ["..."],
  "tasks": [
    {{"task": "...", "responsible": "...", "deadline": "..."}},
    ...
  ]
}}
    """
    return prompt.format(transcript_text=transcript_text)

def get_rag_answer_prompt(question_text: str, retrieved_texts: str) -> str:
    """
    question_text — вопрос пользователя
    retrieved_texts — склеенный контекст из найденных чанков саммари
    """
    return (
        "Ты корпоративный ассистент. Отвечай строго на русском.\n\n"
        "Ниже — выдержки из саммари встреч. Используй их как первоисточник. "
        "Если контекст не помогает, честно скажи, что по данным встреч ответ неочевиден, "
        "и предложи, где можно уточнить.\n\n"
        f"Вопрос:\n{question_text}\n\n"
        f"Контекст:\n{retrieved_texts}\n\n"
        "Дай краткий, точный и практичный ответ, с явными ссылками на конкретные пункты из контекста."
    )


