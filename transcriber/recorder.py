import os
from datetime import datetime
import subprocess
import soundfile as sf

import sounddevice as sd

def _find_device_id_by_name(name_parts):
    """
    name_parts: —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ["VirtualCable", "pulse", "default"])
    –ò—â–µ—Ç –ø–æ output –∏ input –¥–µ–≤–∞–π—Å–∞–º.
    """
    devices = sd.query_devices()
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ output
    for name in name_parts:
        for idx, dev in enumerate(devices):
            if name.lower() in dev['name'].lower() and dev['max_output_channels'] > 0:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ output-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {dev['name']} (id={idx})")
                return idx
    # –ó–∞—Ç–µ–º –∏—â–µ–º –ø–æ input
    for name in name_parts:
        for idx, dev in enumerate(devices):
            if name.lower() in dev['name'].lower() and dev['max_input_channels'] > 0:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ input-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {dev['name']} (id={idx})")
                return idx
    # –ù–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–µ—á–∞—Ç–∞–µ–º –≤—Å—ë, —á—Ç–æ –µ—Å—Ç—å
    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞: {name_parts}")
    print("\n–í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    for idx, dev in enumerate(devices):
        print(f"ID: {idx:2d} | name: {dev['name']} | in: {dev['max_input_channels']} | out: {dev['max_output_channels']}")
    raise RuntimeError(
        f"\n–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ {name_parts}. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–∞–±–µ–ª—è –∏ PulseAudio/PipeWire!"
    )


def record_audio_windows(duration_sec=10, output_dir="audio"):
    """
    –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ —Å VB-Cable, Stereo Mix –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ Windows.
    """
    os.makedirs(output_dir, exist_ok=True)
    for virtual_name in ["VB-Cable", "Stereo Mix"]:
        try:
            device_id = _find_device_id_by_name(virtual_name)
            break
        except RuntimeError:
            device_id = None
    if device_id is None:
        raise RuntimeError(
            "–ù–µ –Ω–∞–π–¥–µ–Ω VB-Cable –∏–ª–∏ Stereo Mix! –ü–æ–¥–∫–ª—é—á–∏ virtual audio device –∏ –≤—ã—Å—Ç–∞–≤—å –µ–≥–æ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã—Ö–æ–¥."
        )

    samplerate = 48000
    channels = 1
    dtype = 'int16'

    print(f"üî¥ –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ Windows: {duration_sec} —Å–µ–∫, device id {device_id}")
    audio = sd.rec(
        int(duration_sec * samplerate),
        samplerate=samplerate,
        channels=channels,
        dtype=dtype,
        device=device_id
    )
    sd.wait()
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = os.path.join(output_dir, f"meeting_{timestamp}_win.wav")
    sf.write(filename, audio, samplerate, subtype='PCM_16')
    print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}")
    return filename

def record_audio_linux(duration_sec=10, output_dir="audio"):
    """
    –ó–∞–ø–∏—Å—å system audio –Ω–∞ Linux —Å –ø–æ–º–æ—â—å—é parec + sox (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–∞–∫ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ).
    –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ VirtualCable —Å monitor-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–º.
    """
    os.makedirs(output_dir, exist_ok=True)
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = os.path.join(output_dir, f"meeting_{timestamp}_linux.wav")

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ ‚Äî —Ä–æ–≤–Ω–æ –∫–∞–∫ —Ç—ã –ø–∏—Å–∞–ª –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ!
    parec_cmd = [
        "parec", "-d", "VirtualCable.monitor",
        "--rate=48000", "--format=s16le", "--channels=1", "--latency-msec=1"
    ]

    sox_cmd = [
        "sox", "-t", "raw", "-r", "48000", "-e", "signed-integer", "-b", "16", "-c", "1", "-V1", "-", filename
    ]

    print(f"üî¥ –ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ parec + sox ({duration_sec} —Å–µ–∫)...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º parec ‚Üí sox —á–µ—Ä–µ–∑ –ø–∞–π–ø
    parec_proc = subprocess.Popen(parec_cmd, stdout=subprocess.PIPE)
    sox_proc = subprocess.Popen(sox_cmd, stdin=parec_proc.stdout)

    try:
        sox_proc.wait(timeout=duration_sec)
    except subprocess.TimeoutExpired:
        print("‚èπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å (timeout)...")
        parec_proc.terminate()
        sox_proc.terminate()

    abs_path = os.path.abspath(filename)
    print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {abs_path}")
    return filename

def record_audio_mac(duration_sec=10, output_dir="audio"):
    """
    –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ —Å BlackHole –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ virtual audio device –Ω–∞ Mac.
    """
    os.makedirs(output_dir, exist_ok=True)
    device_id = _find_device_id_by_name("BlackHole")
    samplerate = 48000
    channels = 1
    dtype = 'int16'

    print(f"üî¥ –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ MacOS: {duration_sec} —Å–µ–∫, device id {device_id}")
    audio = sd.rec(
        int(duration_sec * samplerate),
        samplerate=samplerate,
        channels=channels,
        dtype=dtype,
        device=device_id
    )
    sd.wait()
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = os.path.join(output_dir, f"meeting_{timestamp}_mac.wav")
    sf.write(filename, audio, samplerate, subtype='PCM_16')
    print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}")
    return filename
