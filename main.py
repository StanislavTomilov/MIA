import os, time
from pynput import keyboard as kb
import threading
from transcriber.recorder import Recorder
from transcriber.whisper import load_asr_model, transcribe_with_faster_whisper
from llms.llm import load_llm_client
from prompts.templates import get_corporate_summary_prompt, get_interview_prompt

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
asr_model = load_asr_model()
llm_client = load_llm_client()
recorder = Recorder.create_auto()
is_meeting_active = False
is_question_active = False

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∂–∞—Ç—ã—Ö –∫–ª–∞–≤–∏—à
pressed_keys = set()

def handle_meeting_recording():
    global is_meeting_active
    if not is_meeting_active:
        recorder.start_main_recording()
        print("‚ñ∂Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞—á–∞—Ç–∞ (Ctrl+R —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)")
        is_meeting_active = True
    else:
        audio_path = recorder.stop_main_recording()
        print("‚èπ –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞...")
        transcript_text = transcribe_with_faster_whisper(audio_path, asr_model=asr_model)
        prompt = get_corporate_summary_prompt(transcript_text)
        summary_json_str = llm_client.generate_answer(prompt)
        os.makedirs("summaries", exist_ok=True)
        base = os.path.splitext(os.path.basename(audio_path))[0]
        with open(f"summaries/{base}_summary.json", "w", encoding="utf-8") as f:
            f.write(summary_json_str)
        print(f"‚úÖ –°–∞–º–º–∞—Ä–∏ –≤—Å—Ç—Ä–µ—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: summaries/{base}_summary.json")
        is_meeting_active = False

def handle_question_recording():
    global is_question_active
    if not is_question_active:
        if not is_meeting_active:
            print("–û—à–∏–±–∫–∞: –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –∏–¥—ë—Ç. –ù–µ–ª—å–∑—è —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
            return
        recorder.start_question_recording()
        is_question_active = True
    else:
        audio_path = recorder.stop_question_recording()
        print("üîµ –ó–∞–ø–∏—Å—å –≤–æ–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞...")
        question_text = transcribe_with_faster_whisper(audio_path, asr_model=asr_model)
        print(f"–í–æ–ø—Ä–æ—Å: {question_text}")
        prompt = get_interview_prompt(question_text)

        start_time = time.perf_counter()  # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –¥–æ –≤—ã–∑–æ–≤–∞ LLM

        # answer = llm_client.generate_answer(prompt)
        for chunk in llm_client.generate_answer_stream(prompt):
            print(chunk, end='', flush=True)  # –í—ã–≤–æ–¥–∏–º –ø–æ –º–µ—Ä–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        print()  # –î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞

        end_time = time.perf_counter()  # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        elapsed = end_time - start_time  # –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É

        print(f"‚è±Ô∏è –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {elapsed:.2f} —Å–µ–∫.")

        is_question_active = False

def on_press(key):
    pressed_keys.add(key)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Ctrl+R
    if (kb.Key.ctrl_l in pressed_keys or kb.Key.ctrl_r in pressed_keys) and hasattr(key, 'char') and key.char in ('r', 'R'):
        threading.Thread(target=handle_meeting_recording).start()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Ctrl+Q
    if (kb.Key.ctrl_l in pressed_keys or kb.Key.ctrl_r in pressed_keys) and hasattr(key, 'char') and key.char in ('q', 'Q'):
        threading.Thread(target=handle_question_recording).start()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è ESC
    if key == kb.Key.esc:
        print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return False  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å listener

def on_release(key):
    if key in pressed_keys:
        pressed_keys.remove(key)

def listen_hotkeys():
    print("====================================")
    print("Ctrl+R ‚Äî —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø –∑–∞–ø–∏—Å–∏ –≤—Å–µ–π –≤—Å—Ç—Ä–µ—á–∏")
    print("Ctrl+Q ‚Äî —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞")
    print("ESC    ‚Äî –≤—ã—Ö–æ–¥")
    print("====================================")
    with kb.Listener(on_press=on_press, on_release=on_release) as listener:
        listener.join()

if __name__ == "__main__":
    listen_hotkeys()
