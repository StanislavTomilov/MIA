"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è main.py
"""
import os
import time
import threading
import logging
import signal
import sys
from pathlib import Path
from typing import Dict, Any, Optional

from pynput import keyboard as kb

from utils.config import get_config
from utils.app_state import state_manager
from utils.audio_manager import AudioManager, AudioRecordingError
from utils.model_cache import model_cache

from transcriber.whisper_optimized import OptimizedWhisperTranscriber, TranscriptionError
from llms.llm import LocalLLMClient
from prompts.templates import get_corporate_summary_prompt, get_interview_prompt

from rag.embedder import Embedder
from rag.search import search
from prompts.templates import get_rag_answer_prompt
import faiss
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('mia.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class MIAApplication:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è MIA"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.audio_manager: Optional[AudioManager] = None
        self.transcriber: Optional[OptimizedWhisperTranscriber] = None
        self.llm_client: Optional[LocalLLMClient] = None
        self.embedder: Optional[Embedder] = None
        
        # –§–ª–∞–≥ –¥–ª—è graceful shutdown
        self.running = True
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._initialize_components()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("Initializing MIA application...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            self.audio_manager = AudioManager(self.config)
            self.audio_manager.setup_virtual_cable()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä–∞
            self.transcriber = OptimizedWhisperTranscriber(self.config)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –∫–ª–∏–µ–Ω—Ç–∞
            self.llm_client = LocalLLMClient(
                host=self.config["llm_host"],
                model=self.config["llm_model"]
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–±–µ–¥–¥–µ—Ä–∞
            self.embedder = Embedder(
                model_name=self.config["rag_model_name"],
                device=self.config["asr_device"]
            )
            
            logger.info("MIA application initialized successfully")
            
        except Exception as e:
            logger.error(f"Failed to initialize application: {e}")
            raise
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"Received signal {signum}, shutting down...")
        self.running = False
        self.cleanup()
        sys.exit(0)
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("Cleaning up resources...")
        
        if self.audio_manager:
            self.audio_manager.cleanup()
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –º–æ–¥–µ–ª–µ–π
        model_cache.clear()
    
    def handle_meeting_recording(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—Å—Ç—Ä–µ—á–∏"""
        try:
            if not state_manager.is_meeting_active():
                # –°—Ç–∞—Ä—Ç –∑–∞–ø–∏—Å–∏
                self.audio_manager.start_main_recording()
                state_manager.set_meeting_active(True)
                logger.info("Meeting recording started")
                print("‚ñ∂Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞—á–∞—Ç–∞ (Ctrl+R —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)")
            else:
                # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
                audio_path = self.audio_manager.stop_main_recording()
                state_manager.set_meeting_active(False)
                logger.info("Meeting recording stopped")
                print("‚èπ –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞...")
                
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
                transcript_text = self.transcriber.transcribe(audio_path)
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏
                prompt = get_corporate_summary_prompt(transcript_text)
                summary_json_str = self.llm_client.generate_answer(prompt)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏
                self._save_summary(audio_path, summary_json_str)
                
        except (AudioRecordingError, TranscriptionError) as e:
            logger.error(f"Meeting recording error: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—Å—Ç—Ä–µ—á–∏: {e}")
            state_manager.set_meeting_active(False)
        except Exception as e:
            logger.error(f"Unexpected error in meeting recording: {e}")
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            state_manager.set_meeting_active(False)
    
    def handle_question_recording(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞"""
        try:
            if not state_manager.is_question_active():
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å—Ç—Ä–µ—á–∞ –∞–∫—Ç–∏–≤–Ω–∞
                if not state_manager.is_meeting_active():
                    print("‚ùå –û—à–∏–±–∫–∞: –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –∏–¥—ë—Ç. –ù–µ–ª—å–∑—è —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
                    return
                
                # –°—Ç–∞—Ä—Ç –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞
                self.audio_manager.start_question_recording()
                state_manager.set_question_active(True)
                logger.info("Question recording started")
                print("üî¥ –ó–∞–ø–∏—Å—å –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞—á–∞—Ç–∞ (Ctrl+Q —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)")
            else:
                # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞
                audio_path = self.audio_manager.stop_question_recording()
                state_manager.set_question_active(False)
                logger.info("Question recording stopped")
                print("üîµ –ó–∞–ø–∏—Å—å –≤–æ–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞...")
                
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
                question_text = self.transcriber.transcribe(audio_path)
                print(f"–í–æ–ø—Ä–æ—Å: {question_text}")
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
                prompt = get_interview_prompt(question_text)
                
                # –ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
                start_time = time.perf_counter()
                for chunk in self.llm_client.generate_answer_stream(prompt):
                    print(chunk, end='', flush=True)
                print()
                
                elapsed = time.perf_counter() - start_time
                print(f"‚è±Ô∏è –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {elapsed:.2f} —Å–µ–∫.")
                
        except (AudioRecordingError, TranscriptionError) as e:
            logger.error(f"Question recording error: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            state_manager.set_question_active(False)
        except Exception as e:
            logger.error(f"Unexpected error in question recording: {e}")
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            state_manager.set_question_active(False)
    
    def _save_summary(self, audio_path: str, summary_json_str: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏"""
        try:
            summaries_dir = Path(self.config["summaries_dir"])
            summaries_dir.mkdir(exist_ok=True)
            
            base = Path(audio_path).stem
            out_path = summaries_dir / f"{base}_summary.json"
            
            with open(out_path, "w", encoding="utf-8") as f:
                f.write(summary_json_str)
            
            logger.info(f"Summary saved: {out_path}")
            print(f"‚úÖ –°–∞–º–º–∞—Ä–∏ –≤—Å—Ç—Ä–µ—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {out_path}")
            
        except Exception as e:
            logger.error(f"Failed to save summary: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏: {e}")
    
    def run_rag_chat_summaries(self):
        """RAG —á–∞—Ç –ø–æ —Å–∞–º–º–∞—Ä–∏"""
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–∞
            idx_path = Path(self.config["rag_store_dir"]) / "faiss.index"
            meta_path = Path(self.config["rag_store_dir"]) / "meta.json"
            
            if not (idx_path.exists() and meta_path.exists()):
                print("[RAG] –ò–Ω–¥–µ–∫—Å –ø–æ —Å–∞–º–º–∞—Ä–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞: python -m rag.build")
                return
            
            index = faiss.read_index(str(idx_path))
            with open(meta_path, "r", encoding="utf-8") as f:
                metas = json.load(f)
            
            print("\n[RAG] –ß–∞—Ç –ø–æ –°–ê–ú–ú–ê–†–ò. –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ 'exit'):")
            
            while self.running:
                try:
                    q = input("?> ").strip()
                    if not q:
                        continue
                    if q.lower() in ("exit", "quit"):
                        print("[RAG] –í—ã—Ö–æ–¥.")
                        break
                    
                    # –ü–æ–∏—Å–∫
                    q_vec = self.embedder.encode([q])
                    hits = search(index, metas, q_vec, 
                                top_k=self.config["rag_top_k"], 
                                threshold=self.config["rag_threshold"])
                    
                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                    lines = []
                    for h in hits:
                        p = h["meta"].get("path")
                        doc_id = h["meta"].get("doc_id")
                        chunk_id = h["meta"].get("chunk_id")
                        lines.append(f"[summary:{doc_id}#chunk{chunk_id}] score={h['score']:.2f} | {p}")
                    
                    retrieved = "–ù–∞–π–¥–µ–Ω—ã —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Å–∞–º–º–∞—Ä–∏:\n" + ("\n".join(lines) if lines else "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    prompt = get_rag_answer_prompt(q, retrieved)
                    
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
                    print("\n--- –û—Ç–≤–µ—Ç (stream) ---")
                    for chunk in self.llm_client.generate_answer_stream(prompt):
                        print(chunk, end="", flush=True)
                    print("\n----------------------\n")
                    
                except KeyboardInterrupt:
                    break
                except Exception as e:
                    logger.error(f"RAG chat error: {e}")
                    print(f"‚ùå –û—à–∏–±–∫–∞ RAG —á–∞—Ç–∞: {e}")
                    
        except Exception as e:
            logger.error(f"Failed to start RAG chat: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ RAG —á–∞—Ç–∞: {e}")
    
    def on_press(self, key):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à"""
        state_manager.add_pressed_key(key)
        
        # Ctrl+R ‚Äî —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø –≤—Å—Ç—Ä–µ—á–∏
        if state_manager.has_key_combination([kb.Key.ctrl_l, kb.Key.ctrl_r], ['r', 'R']):
            threading.Thread(target=self.handle_meeting_recording, daemon=True).start()
        
        # Ctrl+Q ‚Äî —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø –≤–æ–ø—Ä–æ—Å–∞
        if state_manager.has_key_combination([kb.Key.ctrl_l, kb.Key.ctrl_r], ['q', 'Q']):
            threading.Thread(target=self.handle_question_recording, daemon=True).start()
        
        # ESC ‚Äî –≤—ã—Ö–æ–¥
        if key == kb.Key.esc:
            logger.info("ESC pressed, exiting...")
            self.running = False
            return False
    
    def on_release(self, key):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à"""
        state_manager.remove_pressed_key(key)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            print("====================================")
            print("Ctrl+R ‚Äî —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø –∑–∞–ø–∏—Å–∏ –≤—Å–µ–π –≤—Å—Ç—Ä–µ—á–∏")
            print("Ctrl+Q ‚Äî —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø –∑–∞–ø–∏—Å–∏ –≤–æ–ø—Ä–æ—Å–∞")
            print("ESC    ‚Äî –≤—ã—Ö–æ–¥")
            print("====================================")
            
            # –ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è –∫–ª–∞–≤–∏—à
            with kb.Listener(on_press=self.on_press, on_release=self.on_release) as listener:
                listener.join()
            
            # RAG —á–∞—Ç –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            if self.running:
                self.run_rag_chat_summaries()
                
        except Exception as e:
            logger.error(f"Application error: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        finally:
            self.cleanup()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = get_config()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = MIAApplication(config)
        app.run()
        
    except Exception as e:
        logger.error(f"Failed to start application: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

